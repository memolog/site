<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>メモログ</title>
  
  <subtitle>💡 Personal notes about anything I&#39;m interested in</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://memolog.org/"/>
  <updated>2020-02-06T00:11:39.256Z</updated>
  <id>https://memolog.org/</id>
  
  <author>
    <name>Yutaka Yamaguchi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Optional chaining and Nullish coalescing</title>
    <link href="https://memolog.org/2020/optional-chaining-and-nullish-coalescing.html"/>
    <id>https://memolog.org/2020/optional-chaining-and-nullish-coalescing.html</id>
    <published>2020-02-05T22:25:28.000Z</published>
    <updated>2020-02-06T00:11:39.256Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;ES2020で新しく追加された機能（&lt;a href=&quot;https://kangax.github.io/compat-table/es2016plus/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ECMAScript 2016+ compatibility table&lt;/a&gt;の画面の下の方にある）はどれもわりと実用的で、なくても大丈夫なんだけどあると便利といったものが並んでいる。Bigintは日常的には使わないとは思うけど。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Event target and currentTarget</title>
    <link href="https://memolog.org/2020/event-target-and-currenttarget.html"/>
    <id>https://memolog.org/2020/event-target-and-currenttarget.html</id>
    <published>2020-02-04T22:32:36.000Z</published>
    <updated>2020-02-04T23:52:01.900Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Eventオブジェクトには&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/Event/currentTarget&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;currentTarget&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/API/Event/target&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;target&lt;/a&gt;の2つのプロパティがあるけど、いつもどっちがどっちか混同する。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Load jQuery library in the Chrome developer console</title>
    <link href="https://memolog.org/2020/load-jquery-in-developer-console.html"/>
    <id>https://memolog.org/2020/load-jquery-in-developer-console.html</id>
    <published>2020-02-03T22:19:43.000Z</published>
    <updated>2020-02-04T01:16:24.047Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;スクリプト内のDOM操作でjQueryを使っているけれど、処理がスクリプト内で完結していて、GlobalにはjQueryをロードさせていないという場合がある。あると思う。&lt;/p&gt;
&lt;p&gt;そういった場合、例えばそのスクリプトに新しい実装を入れたいけどjQueryでのDOM操作が自分の期待通りに行えるかをChromeのデベロッパーツールでちょっと確認したいみたいな時に少し困る。大して困らない気もするけど、少し手間ではある。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>「第四の革命」を読んだ</title>
    <link href="https://memolog.org/2019/book-the-4th-revolution.html"/>
    <id>https://memolog.org/2019/book-the-4th-revolution.html</id>
    <published>2019-05-01T23:41:09.000Z</published>
    <updated>2019-05-02T04:38:07.393Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;「&lt;a href=&quot;https://www.shin-yo-sha.co.jp/mokuroku/books/978-4-7885-1522-2.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;第四の革命&lt;/a&gt;」を読んだ。情報通信技術が、従来の「記録する・履歴をとる」という単純な伝達手段であったものから飛躍して、記録・履歴のデータが処理され、情報として再利用されるようになった。それが様々なテクノロジーに内包されるにつれ、情報通信技術が単なるツールという枠を越えて、情報世界（情報圏・インフォスフィア）を構成するようになっている。インフォスフィアがどのように個々人や世界に影響をもたらすのか、といった内容である。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ナノテクノロジー、IOT、ウェブ2.0 …（中略。いろんなテクノロジー）… これらすべての現象を、一つの、マクロなトレンンドの多様な側面として説明できるような、統合的視点を見つけ出すことができるだろうか？　それに答えるのが難しいのは、まず我々がいまだにICT（情報通信技術）を、外界と、そして我々相互が関わりあうためのツール見なしているという点にある。ICTは、実際にはすでに環境なのであり、人類学的な、そして社会的な、世界を解釈する力となっているのである。それは、我々の知的、物理的な現実を生み出し、形成し、我々の自己理解を変え、我々が相互に関わるやり方を変え、世界を理解する方法をより高度化している。そしてこれらすべてが、広く、深く、強力に進んでいるのである。（「はじめに」より）
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Genarate Anki Cards Tool</title>
    <link href="https://memolog.org/2019/generate-anki-cards-tool.html"/>
    <id>https://memolog.org/2019/generate-anki-cards-tool.html</id>
    <published>2019-01-04T02:47:48.000Z</published>
    <updated>2019-01-04T04:21:07.312Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;最近&lt;a href=&quot;https://apps.ankiweb.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Anki&lt;/a&gt;を使って単語の記憶をしようという試みをしている。もともとは&lt;a href=&quot;https://fluent-forever.com/book/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Fluent Forever&lt;/a&gt;という本に載っていたところからこのアプリを知った（最近になって邦訳「&lt;a href=&quot;https://amzn.to/2F35KpT&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;脳が認める外国語勉強法&lt;/a&gt;」があると知った）。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Merge Sort in JavaScript</title>
    <link href="https://memolog.org/2018/merge-sort-in-javascript.html"/>
    <id>https://memolog.org/2018/merge-sort-in-javascript.html</id>
    <published>2018-08-19T08:43:28.000Z</published>
    <updated>2019-01-04T02:09:12.877Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://memolog.org/2018/insertion-sort-in-javascript.html&quot;&gt;Insertion Sort in JavaScript&lt;/a&gt;からの引き続き。内容は&lt;a href=&quot;https://en.wikipedia.org/wiki/Merge_sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Merge sort&lt;/a&gt;からの抜粋なので、詳細はそちらを参照。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>A11y fixes for prism default theme</title>
    <link href="https://memolog.org/2018/a11y-fixes-for-prism-default-theme.html"/>
    <id>https://memolog.org/2018/a11y-fixes-for-prism-default-theme.html</id>
    <published>2018-08-17T15:18:27.000Z</published>
    <updated>2019-01-04T02:09:12.873Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lighthouse&lt;/a&gt; reported &lt;a href=&quot;https://paulirish.github.io/lighthouse/docs/api/lighthouse/2.5.1/lighthouse-core_audits_accessibility_color-contrast.js.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;color contrast issues&lt;/a&gt; in the code block colored by &lt;a href=&quot;https://prismjs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;prism.js&lt;/a&gt;. Actually I don’t care about these issues because people doesn’t read code blocks carefully. However, I just did the quick fixes for them by changing the color to see the contrast ratio in Chrome developer console.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Add JSON-LD structured data</title>
    <link href="https://memolog.org/2018/add-json-ld-structured-data.html"/>
    <id>https://memolog.org/2018/add-json-ld-structured-data.html</id>
    <published>2018-08-14T09:04:54.000Z</published>
    <updated>2019-01-04T02:09:12.874Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;構造化データ（structured data）の部分をmicrodataからJSON-LDに置き換えてみた。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Create a new icon</title>
    <link href="https://memolog.org/2018/create-a-new-icon.html"/>
    <id>https://memolog.org/2018/create-a-new-icon.html</id>
    <published>2018-08-11T22:28:32.000Z</published>
    <updated>2019-01-04T02:09:12.875Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;アイコンをsvgで作り直してページの一番上につけた。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Insertion Sort in JavaScript</title>
    <link href="https://memolog.org/2018/insertion-sort-in-javascript.html"/>
    <id>https://memolog.org/2018/insertion-sort-in-javascript.html</id>
    <published>2018-08-06T20:47:14.000Z</published>
    <updated>2019-01-04T02:09:12.876Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://memolog.org/2018/selection-sort-in-javascript.html&quot;&gt;Selection Sort in JavaScript&lt;/a&gt;の記事から引き続き。内容は&lt;a href=&quot;https://en.wikipedia.org/wiki/Insertion_sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;挿入ソート&lt;/a&gt;からの抜粋なので詳細はそちらを参照。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Selection Sort in JavaScript</title>
    <link href="https://memolog.org/2018/selection-sort-in-javascript.html"/>
    <id>https://memolog.org/2018/selection-sort-in-javascript.html</id>
    <published>2018-08-04T20:57:21.000Z</published>
    <updated>2019-01-04T02:09:12.877Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://memolog.org/2018/bubble-sort-in-javascript.html&quot;&gt;Bubble Sort in JavaScript&lt;/a&gt;の記事から引き続き。内容はほぼ&lt;a href=&quot;https://en.wikipedia.org/wiki/Selection_sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;選択ソート&lt;/a&gt;から抜粋してるだけなので、詳しくはそちらを参照。JavaScript上で自前のソートを実装する意味はあまりないのだが、試しに選択ソートを実装してみた。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Bubble Sort in JavaScript</title>
    <link href="https://memolog.org/2018/bubble-sort-in-javascript.html"/>
    <id>https://memolog.org/2018/bubble-sort-in-javascript.html</id>
    <published>2018-08-03T22:00:11.000Z</published>
    <updated>2019-01-04T02:09:12.874Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://memolog.org/2018/about-array-prototype-sort.html&quot;&gt;Array.prototype.sort について&lt;/a&gt;と&lt;a href=&quot;https://memolog.org/2018/about-typedarray-prototype-sort.html&quot;&gt;TypedArray.prototype.sort について&lt;/a&gt;で書いたようにビルトインされているsortメソッドが効率的なソートを実行できるように実装されているので、JavaScript上で自前のソートを実装する意味はあまりないのだけど、試しにバブルソートをJavaScript上で作ってみた。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TypedArray.prototype.sort について</title>
    <link href="https://memolog.org/2018/about-typedarray-prototype-sort.html"/>
    <id>https://memolog.org/2018/about-typedarray-prototype-sort.html</id>
    <published>2018-07-31T20:23:27.000Z</published>
    <updated>2019-01-04T02:09:12.874Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;前回の「&lt;a href=&quot;https://memolog.org/2018/about-array-prototype-sort.html&quot;&gt;Array.prototype.sort について&lt;/a&gt;」に引き続き、今度は&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TypedArray&lt;/a&gt;の&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/TypedArray/sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sort&lt;/a&gt;について。実装は別だけど対応は基本的に同じなので簡単に。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Array.prototype.sort について</title>
    <link href="https://memolog.org/2018/about-array-prototype-sort.html"/>
    <id>https://memolog.org/2018/about-array-prototype-sort.html</id>
    <published>2018-07-29T20:49:48.000Z</published>
    <updated>2019-01-04T02:09:12.874Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;JavaScriptの配列には&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/sort&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;sort&lt;/a&gt;メソッドがあり配列のソートを実行することができるけど、この配列のソートの中の実装はどうなっているのかという話。&lt;a href=&quot;http://kakts-tec.hatenablog.com/entry/2016/12/18/153845&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;v8における配列ソートについて&lt;/a&gt;の記事が大変参考になりました。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScriptでビットベクタルを使う</title>
    <link href="https://memolog.org/2018/bit-vector-in-javascript.html"/>
    <id>https://memolog.org/2018/bit-vector-in-javascript.html</id>
    <published>2018-07-28T01:49:22.000Z</published>
    <updated>2019-01-04T02:09:12.874Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;ビットベクトルは2進数の値（ビット）の配列を使って状態を保持する。ビット配列（bit array）とかbit set, bit stringとも言うらしい。詳しくは&lt;a href=&quot;https://en.wikipedia.org/wiki/Bit_array&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Bit array&lt;/a&gt;を参照。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>npm run script に引数を渡す</title>
    <link href="https://memolog.org/2018/pass-arguments-to-npm-run-script.html"/>
    <id>https://memolog.org/2018/pass-arguments-to-npm-run-script.html</id>
    <published>2018-07-26T20:31:39.000Z</published>
    <updated>2019-01-04T02:09:12.877Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;この記事の上にあるFeatured Imageを生成するときに毎回&lt;code&gt;primitive_bulk&lt;/code&gt;のコマンドを入力していたのだけど、&lt;br&gt;しかしさすがに面倒になってきたので、&lt;code&gt;npm run script&lt;/code&gt; にショートカットを用意してショートカットに引数を渡すようにしてみた。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScriptでハッシュテーブルを作る</title>
    <link href="https://memolog.org/2018/create-hash-table-in-javascript.html"/>
    <id>https://memolog.org/2018/create-hash-table-in-javascript.html</id>
    <published>2018-07-25T21:31:02.000Z</published>
    <updated>2019-01-04T02:09:12.875Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://memolog.org/2018/javascript-property-access-big-o.html&quot;&gt;JavaScriptオブジェクトのプロパティアクセスにおけるビッグ・オー&lt;/a&gt;で書いたようにJavaScriptのオブジェクトは基本ハッシュテーブルであるし、&lt;a href=&quot;https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Map&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Map&lt;/a&gt;オブジェクトも中の実装はChromeではハッシュテーブルであると書かれてある(&lt;a href=&quot;https://v8project.blogspot.com/2018/01/hash-code.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Optimizing hash tables: hiding the hash code&lt;/a&gt;)。だからJavaScriptで自前のハッシュテーブルを作るというのは必要のないことなのだけど試しに作ってみたかった。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScriptオブジェクトのプロパティアクセスにおけるビッグ・オー</title>
    <link href="https://memolog.org/2018/javascript-property-access-big-o.html"/>
    <id>https://memolog.org/2018/javascript-property-access-big-o.html</id>
    <published>2018-07-23T11:51:00.000Z</published>
    <updated>2019-01-04T02:09:12.876Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;配列に格納しているオブジェクトをそのIDで検索するとしたら処理量は（線形探索だろうから）ビッグ・オー記法としては &lt;code&gt;O(n)&lt;/code&gt; になるだろう。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>PWAのチェックリストを満たす</title>
    <link href="https://memolog.org/2018/complete-all-the-pwa-checklist.html"/>
    <id>https://memolog.org/2018/complete-all-the-pwa-checklist.html</id>
    <published>2018-07-14T02:32:41.000Z</published>
    <updated>2019-01-04T02:09:12.875Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;たいして更新もしない個人のブログで Service Worker とか入れる必要まったくないと思いながらも、&lt;a href=&quot;https://developers.google.com/web/tools/lighthouse/?hl=ja&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Lighthouse&lt;/a&gt; の結果を見るたびに「PWAのチェックリストだけ100点に至らない」というなんとも言えないモヤモヤ感があった。別にそんなに大変でもないんだから入れてしまえ、ということでPWAのチェックリストを満たすべく、Service Worker と App manifest に対応しました。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TypeScriptとWebpackを使ってDynamic Importを行う</title>
    <link href="https://memolog.org/2018/dynamic-import-and-code-splitting-with-webpack-and-typescript.html"/>
    <id>https://memolog.org/2018/dynamic-import-and-code-splitting-with-webpack-and-typescript.html</id>
    <published>2018-07-07T22:40:57.000Z</published>
    <updated>2019-01-04T02:09:12.875Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;Webpackではバンドルするファイルを3つのアプローチで分けることができる。エントリーポイントを複数設けたり、webpack.config.jsにsplitChunksの設定を入れたりなどの他に、Dyanmic importを使うことでもファイルを分けることができる。詳しくは&lt;a href=&quot;https://webpack.js.org/guides/code-splitting/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Code Splitting&lt;/a&gt;を参照。
    
    </summary>
    
    
  </entry>
  
</feed>
